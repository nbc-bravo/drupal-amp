<?php

use Drupal\image\Entity\ImageStyle;
use Drupal\image\ImageStyleInterface;

/**
 * Implements hook_install().
 */
function amp_install() {
}

/**
 * Implements hook_requirements().
 */
function amp_requirements($phase) {
  $requirements = [];
  if (!class_exists('\Lullabot\AMP\AMP')) {
    $requirements['amp_library'] = [
      'title' => t('AMP'),
      'value' => t('Not available'),
      'description' => t('The AMP module requires the PHP <a href="@library">AMP library</a>.', ['@library' => 'https://github.com/Lullabot/amp-library']),
      'severity' => REQUIREMENT_ERROR,
    ];
  }

  if ($phase == 'runtime') {
    $module_handler = \Drupal::service('module_handler');
    if (!$module_handler->moduleExists('schema_metatag')) {
      $requirements['amp_token'] = [
        'title' => t('Schema.org Metatag module required for AMP'),
        'value' => t('Not installed'),
        'description' => t('To create valid AMP you will also need to download, install, and configure the <a href="@module">Schema.org Metatag</a> module as a dependency.', ['@module' => 'https://www.drupal.org/project/schema_metatag']),
        'severity' => REQUIREMENT_WARNING,
      ];
    }

    $theme_handler = \Drupal::service('theme_handler');
    if (!$theme_handler->themeExists('amptheme')) {
      $requirements['amptheme'] = [
        'title' => t('AMP Base Theme'),
        'value' => t('Not installed'),
        'description' => t('The AMP module requires an AMP theme like the <a href="@theme">AMP Base Theme</a> to be installed.', ['@theme' => 'https://www.drupal.org/project/amptheme']),
        'severity' => REQUIREMENT_WARNING,
      ];
    }
  }
  return $requirements;
}

/**
 * Implementation of hook_update_last_removed().
 */
function amp_update_last_removed() {
  return 8002;
}

/**
 * Remove node_types from amp.settings.
 */
function amp_update_8001(&$sandbox) {
  $config = \Drupal::service('config.factory')->getEditable('amp.settings');
  $config->clear('node_types')->save();
}

/**
 * REMOVED.
 * @see https://www.drupal.org/project/amp/issues/2867636
 */
function amp_update_8002() {
}

/**
 * Fix Amp's image style dependencies.
 */
function amp_update_8003() {
  $config_factory = \Drupal::configFactory();
  $styles = [
    'amp_metadata_content_image_min_696px_wide',
    'amp_metadata_logo_600x60',
  ];
  foreach ($styles as $style) {
    $image_style = \Drupal::entityTypeManager()->getStorage('image_style')->load($style);
    if ($image_style) {
      $config = $config_factory->getEditable('image.style.' . $style);
      $config->set('dependencies.enforced.module', ['amp']);
      $config->save();
    }
  }
}

/**
 * Remove AMP metatadata, deferring to the Schema.org Metadata module now.
 */
function amp_update_8004() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('amp.metadata');
  $config->delete();
}

/**
 * Replace deprecated image and file formatter settings.
 */
function amp_update_8005() {
  // Find all file fields that use the outdated formatters.
  $all_fields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('file');
  foreach ($all_fields['node'] as $field_name => $info) {
    foreach ($info['bundles'] as $bundle) {
      $properties = array(
        'targetEntityType' => 'node',
        'bundle' => $bundle
      );
      if ($view_displays = \Drupal::entityManager()->getStorage('entity_view_display')->loadByProperties($properties)) {
        foreach ($view_displays as $view_display) {
          if ($component = $view_display->getComponent($field_name)) {
            // Map old formatter settings to new ones.
            $changed = FALSE;
            switch ($component['type']) {
              case 'amp_video':
                $type = 'amp_video';
                $settings = array(
                  'use_description_as_link_text' => $component['settings']['use_description_as_link_text'],
                  'layout' => 'responsive',
                  'width' => $component['settings']['amp_video_width'],
                  'height' => $component['settings']['amp_video_height'],
                  'autoplay' => FALSE,
                  'controls' => TRUE,
                  'loop' => FALSE,
                );
                $changed = TRUE;
                break;
            }
            if ($changed) {
              $view_display->setComponent($field_name, array(
                'type' => $type,
                'settings' => $settings,
              ) + $component)->save();
            }
          }
        }
      }
    }
  }
   // Find all image fields that use the outdated formatters.
  $all_fields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('image');
  foreach ($all_fields['node'] as $field_name => $info) {
    foreach ($info['bundles'] as $bundle) {
      $properties = array(
        'targetEntityType' => 'node',
        'bundle' => $bundle
      );
      if ($view_displays = \Drupal::entityManager()->getStorage('entity_view_display')->loadByProperties($properties)) {
        foreach ($view_displays as $view_display) {
          if ($component = $view_display->getComponent($field_name)) {
            // Map old formatter settings to new ones.
            $changed = FALSE;
            switch ($component['type']) {
              case 'amp_image':
                $type = 'amp_image';
                $settings = array(
                  'image_style' => $component['settings']['image_style'],
                  'image_link' => $component['settings']['image_link'],
                  'layout' => $component['settings']['amp_layout'],
                  'width' => NULL,
                  'height' => $component['settings']['amp_fixed_height'],
                );
                $changed = TRUE;
                break;
            }
            if ($changed) {
              $view_display->setComponent($field_name, array(
                'type' => $type,
                'settings' => $settings,
              ) + $component)->save();
            }
          }
        }
      }
    }
  }
}

/**
 * Clear Power User settings which are moved to new AMP Replace module. Power
 * User is known to be outdated and may strip valid AMP markup, so it is not
 * recommended for now.
 */
function amp_update_8006() {
  $config = \Drupal::configFactory()->getEditable('amp.settings');
  if (!$config->isNew()) {
    $config->clear('amp_library_process_full_html')
      ->clear('amp_library_warnings_display')
      ->clear('amp_library_process_full_html_warnings')
      ->clear('amp_library_process_statistics')->save();
    return (string) t("Power User mode has been moved to new AMP Replace module. If you want to use that please enable and configure that module. Note that the full replacement done by Power User mode is known to be outdated and won't work correctly unless the AMP library is rewritten. You can use the AMP module without this option.");
  }
}

/**
 * Clear amp_render_css.
 */
function amp_update_8007() {
  $config = \Drupal::configFactory()->getEditable('amp.settings');
  if (!$config->isNew()) {
    $config->clear('amp_render_css')->save();
  }
  return (string) t("Removed the css everywhere setting, css is always rendered that way in 8.3.");
}

/**
 * Set module weight to ensure AMP runs after most modules.
 */
function amp_update_8008() {
  module_set_weight('amp', 10);
}

/**
 * Set module weight to ensure AMP runs after most modules.
 */
function amp_update_8009() {
  module_set_weight('amp', 0);
}
